# 7️⃣ World repo clone & sync ---------------------------------------------
- name: Ensure tmp clone dir exists
  file:
    path: "/opt/tmp_worlds"
    state: directory
    owner: minecraft
    group: minecraft
    mode: "0755"

- name: Ensure .ssh directory exists
  file:
    path: /home/minecraft/.ssh
    state: directory
    owner: minecraft
    group: minecraft
    mode: "0700"

- name: Add GitHub.com to known_hosts
  known_hosts:
    path: /home/minecraft/.ssh/known_hosts
    name: github.com
    key: "{{ lookup('pipe', 'ssh-keyscan -t rsa github.com') }}"
    state: present
    hash_host: false

- name: Check if deploy key already exists
  stat:
    path: /home/minecraft/.ssh/id_rsa_minecraft_worlds.pub
  register: key_stat

- name: Generate deploy key for GitHub (first time only)
  openssh_keypair:
    path: /home/minecraft/.ssh/id_rsa_minecraft_worlds
    type: rsa
    size: 4096
    owner: minecraft
    group: minecraft
    mode: '0600'
  when: not key_stat.stat.exists
  register: github_key

- name: Show GitHub deploy key instructions (if new key)
  debug:
    msg: |
      A new SSH deploy key has been generated for the Minecraft server.

      **Next step (manual once-off):**
      1. Open your GitHub repository → *Settings* → *Deploy keys*.
      2. Click **Add deploy key**.
      3. Paste the public key(.pub), give it a name, and tick “Allow write access” if you want the server to push backups.
  when: github_key.changed or not key_stat.stat.exists

- name: Clone or pull world repository
  git:
    repo: "{{ world_repo }}"
    dest: "{{ world_repo_dir }}"
    version: "{{ world_repo_branch | default('main') }}"
    key_file: "/home/minecraft/.ssh/id_rsa_minecraft_worlds"
    update: yes
    force: yes
    accept_hostkey: true
  become_user: minecraft

# -- mtime logic ----------------------------------------------------------
- name: Gather repo level.dat mtimes
  stat:
    path: "{{ world_repo_dir }}/{{ world_source_subdir }}/{{ item }}/level.dat"
  loop:
    - "{{ world_name }}"
    - "{{ world_name }}_nether"
    - "{{ world_name }}_the_end"
  register: repo_level_stats
  failed_when: false
  become_user: minecraft

- name: Gather server level.dat mtimes
  stat:
    path: "{{ world_target_dir }}/{{ item }}/level.dat"
  loop:
    - "{{ world_name }}"
    - "{{ world_name }}_nether"
    - "{{ world_name }}_the_end"
  register: server_level_stats
  failed_when: false

- name: Compute sync requirement
  set_fact:
    server_world_missing: "{{ (repo_level_stats.results | zip(server_level_stats.results) | selectattr('0.stat.exists') | selectattr('1.stat.exists', 'equalto', False) | list | length) > 0 }}"
    repo_max_mtime: "{{ (repo_level_stats.results | selectattr('stat.exists') | map(attribute='stat.mtime') | list | default([0]) | max) | float }}"
    server_max_mtime: "{{ (server_level_stats.results | selectattr('stat.exists') | map(attribute='stat.mtime') | list | default([0]) | max) | float }}"

- name: Determine if world sync is needed
  set_fact:
    do_world_sync: "{{ server_world_missing or (repo_max_mtime > server_max_mtime) }}"

- name: Rsync worlds into minecraft dir
  ansible.posix.synchronize:
    src: "{{ world_repo_dir }}/{{ world_source_subdir }}/"
    dest: "{{ world_target_dir }}/"
    rsync_opts: ["--checksum"]
    recursive: yes
    delete: no   # do not delete server‑side worlds that are not in repo
  when: do_world_sync
  delegate_to: "{{ inventory_hostname }}"  # run rsync locally on target node
  become_user: minecraft
  notify: restart fabric

- name: Create log dir for minecraft
  file:
    path: /var/log/world_sync
    state: directory
    owner: minecraft
    group: minecraft
    mode: "0755"

- name: Deploy world sync script with inline debug logging
  copy:
    dest: "/usr/local/bin/world_git_sync.sh"
    owner: minecraft
    group: minecraft
    mode: "0755"
    content: |
      #!/usr/bin/env bash
      exec >> /var/log/world_sync/debug.log 2>&1
      set -xeuo pipefail

      # GitHub Deploy Key 사용
      export GIT_SSH_COMMAND="ssh -i /home/minecraft/.ssh/id_rsa_minecraft_worlds -o StrictHostKeyChecking=no"

      rsync -a --checksum --delete --exclude='.git/' "{{ world_target_dir }}/{{ world_name }}/" "{{ world_repo_dir }}/{{ world_source_subdir }}/{{ world_name }}/"
      rsync -a --checksum --delete --exclude='.git/' "{{ world_target_dir }}/{{ world_name }}_nether/" "{{ world_repo_dir }}/{{ world_source_subdir }}/{{ world_name }}_nether/"
      rsync -a --checksum --delete --exclude='.git/' "{{ world_target_dir }}/{{ world_name }}_the_end/" "{{ world_repo_dir }}/{{ world_source_subdir }}/{{ world_name }}_the_end/"

      cd {{ world_repo_dir }}

      # 대상 월드 디렉터리 스테이징
      git add {{ world_source_subdir }}/{{ world_name }} \
              {{ world_source_subdir }}/{{ world_name }}_nether \
              {{ world_source_subdir }}/{{ world_name }}_the_end

      # 변경 사항이 있을 때만 커밋/푸시
      if ! git diff --cached --quiet; then
        ts=$(date +"%Y-%m-%d_%H:%M")
        git commit -m "Auto-backup $ts"
        git push origin {{ world_repo_branch }}
      fi

- name: Schedule daily world sync cron
  cron: 
    name: "Daily world git push"
    user: minecraft
    minute: "{{ cron_sync_min }}"
    hour: "{{ cron_sync_hour }}"
    job: "/usr/local/bin/world_git_sync.sh >> /var/log/world_sync/sync.log 2>&1"

# ➕ Git 사용자 이름/이메일 설정을 추가 (minecraft 계정 전역에 적용)
- name: Set Git user.name and user.email for minecraft user
  become_user: minecraft
  block:
    - name: Set Git user.name
      git_config:
        name: user.name
        value: "{{ git_user_name }}"
        scope: global
    - name: Set Git user.email
      git_config:
        name: user.email
        value: "{{ git_user_email }}"
        scope: global